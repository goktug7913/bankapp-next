generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model MasterAccount {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  account_id      String          @unique
  name            String
  surname         String
  email           String          @unique
  password        String?
  crypto_accounts CryptoAccount[]
  fiat_accounts   FiatAccount[]
  operations      Operation[]
  token           String?         @unique @default("")
  token_expire    DateTime?       @db.Date
  createdAt       DateTime?       @default(now()) @db.Date
  updatedAt       DateTime?       @updatedAt @db.Date
  is_active       Boolean?        @default(true)
}

model CryptoAccount {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  account_id   String              @unique
  parent       MasterAccount       @relation(fields: [parent_id], references: [id])
  parent_id    String              @db.ObjectId
  balance      Float               @default(0)
  currency     String
  name         String
  transactions CryptoTransaction[]
  is_active    Boolean             @default(true)
}

model CryptoTransaction {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  parent_account      CryptoAccount @relation(fields: [parent_account_id], references: [id])
  parent_account_id   String        @db.ObjectId
  amount              Float
  currency            String
  date                DateTime      @db.Date
  description         String
  source_account      String
  destination_account String
  type                String
}

model FiatAccount {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  account_id   String            @unique
  parent       MasterAccount     @relation(fields: [parent_id], references: [id])
  parent_id    String            @db.ObjectId
  balance      Float             @default(0)
  currency     String
  name         String
  transactions FiatTransaction[]
  is_active    Boolean           @default(true)
}

model FiatTransaction {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  parent_account      FiatAccount @relation(fields: [parent_account_id], references: [id])
  parent_account_id   String      @db.ObjectId
  amount              Float
  currency            String
  date                DateTime    @db.Date
  description         String
  source_account      String
  destination_account String
  type                String
}

model Operation {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  type             OperationType @default(UNDEFINED)
  createdAt        DateTime      @default(now()) @db.Date
  updatedAt        DateTime      @updatedAt @db.Date
  masteraccount    MasterAccount @relation(fields: [masteraccount_id], references: [id])
  masteraccount_id String        @db.ObjectId
}

enum OperationType {
  UNDEFINED
  CREATE_ACCOUNT
  CREATE_CRYPTO_ACCOUNT
  CREATE_FIAT_ACCOUNT

  CLOSE_ACCOUNT
  CLOSE_CRYPTO_ACCOUNT
  CLOSE_FIAT_ACCOUNT

  ACTIVATE_ACCOUNT
  ACTIVATE_CRYPTO_ACCOUNT
  ACTIVATE_FIAT_ACCOUNT

  DEACTIVATE_ACCOUNT
  DEACTIVATE_CRYPTO_ACCOUNT
  DEACTIVATE_FIAT_ACCOUNT
}

model Currency {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  ticker String
  type   String
}

enum CurrencyType {
  FIAT
  CRYPTO
}

model internal_logs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int      @map("__v")
  type      LogType  @default(INFO)
  message   String   @default("")
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date
}

enum LogType {
  ERROR
  WARNING
  INFO
}